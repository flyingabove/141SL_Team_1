output
View(output)
output <- read.xls("http://www.sec.gov/Archives/edgar/data/320193/000119312515023697/Financial_Report.xlsx"
,sheet=1)
View(output)
output <- read.xls("http://www.sec.gov/Archives/edgar/data/320193/000119312515023697/Financial_Report.xlsx"
,sheet=2:6)
View(output)
output <- read.xls("http://www.sec.gov/Archives/edgar/data/320193/000119312515023697/Financial_Report.xlsx"
,sheet=2)
View(output)
output <- read.xls("http://www.sec.gov/Archives/edgar/data/320193/000119312515023697/Financial_Report.xlsx"
,sheet=3)
View(output)
output <- read.xls("http://www.sec.gov/Archives/edgar/data/320193/000119312515023697/Financial_Report.xlsx"
,sheet=6)
View(output)
output <- read.xls("http://www.sec.gov/Archives/edgar/data/320193/000119312515023697/Financial_Report.xlsx"
,sheet=7)
View(output)
matches
ticker=CNK
ticker="CNK"
matches<-SEC_info(ticker)
SEC_info<-function(ticker){
con <- dbConnect(RMySQL::MySQL(), host = "sql3.freemysqlhosting.net",
user = "sql373539", password = "bT1*uS6!", dbname="sql373539")
sql<-paste("SELECT * FROM  `Stock2015` WHERE  `cik` =",getCIK(ticker),sep="")
rs1 <- dbSendQuery(con, sql)
matches<-as.data.frame(dbFetch(rs1))
return(matches)
}
#Get CIK
getCIK = function(ticker) {
stopifnot(is.character(ticker))
uri = "http://www.sec.gov/cgi-bin/browse-edgar"
response = getForm(uri,CIK=ticker,action="getcompany")
html = htmlParse(response)
CIKNode = getNodeSet(html, "//acronym[@title=\"Central Index Key\"][text() = \"CIK\"]")
CIKNodeText = sapply(CIKNode, function(x) xmlValue(getSibling(getSibling(x))))
CIK = sub(" .*","",CIKNodeText)
CIK = sub("^0*","",CIK)
CIK
}
matches<-SEC_info(ticker)
matches
link_1<-gsub(x=matches,pattern="-",replacement="")
link_2<-gsub(x=link_1,pattern="index.htm",replacement="/Financial_Report.xlsx")
link_2
link_1
matches<-SEC_info(ticker)
link_1<-gsub(x=matches$cik,pattern="-",replacement="")
link_1
link_1<-gsub(x=matches$link,pattern="-",replacement="")
link_1
link_2<-gsub(x=link_1,pattern="index.htm",replacement="/Financial_Report.xlsx")
link_2
ticker="HSY"
matches<-SEC_info(ticker)
link_1<-gsub(x=matches$link,pattern="-",replacement="")
link_2<-gsub(x=link_1,pattern="index.htm",replacement="/Financial_Report.xlsx")
link_2
link_1
matches
a<-matrix(c(2,1,3,1,2,3,3,3,6),ncol=3)
a
det(a)
det(1)
det(matrix(c(0,1,3,1,0,3,3,3,0),ncol=3))
solve(a)
a<-matrix(c(2,1,3,1,2,3,3,3,67),ncol=3)
solve(a)
a<-matrix(c(2,1,3,1,2,3,3,3,6),ncol=3)
solve(a)
a
eigen(a)
x<-c(30,30,30,30,40,40,40,50,50,50,60,60,60)
x<-c(30,30,30,30,40,40,40,50,50,50,60,60,60)
y<-c(55.8,59.1,54.8,54.6,43.1,42.2,45.2,31.6,30.9,30.8,17.5,20.5,17.2,16.9)
x
y
lm(y~x)
x<-c(30,30,30,30,40,40,40,50,50,50,60,60,60,60)
y<-c(55.8,59.1,54.8,54.6,43.1,42.2,45.2,31.6,30.9,30.8,17.5,20.5,17.2,16.9)
lm(y~x)
rep(1,14)
X<-matrix(c(rep(1,14),x),ncol=2)
X
t(X)%*%X
solve(t(X)%*%X)
Y<-matrix(y)
solve(t(X)%*%X)%*%t(X)%*%Y
t(X)%*%X
solve(t(X)%*%X)
solve(t(X)%*%X)%*%t(X)%*%Y
b<-matrix(c(1,0,0,2),ncol=2)
b
solve(b)
solve(matrix(3 ))
pi3<-function(n){
x=runif(n)
return(4*mean((sqrt1-x^2)+sqrt(1-(1-x)^2))/2)
}
antithetic[i] = pi3(n)
n<-1e4
m<-1e3
n<-1e4
m<-1e3
orginal<-reg(0,m)
pi1<-function(n){
X<-cbind(runif(n),runif(n))
in_circle<-which(X[,1]^2+X[,2]^2<=1)
fraction<-length(in_circle)/n
return(4*fraction)
}
for(i in 1:m){
original[i]=pi(n)
}
var(original)
end.time<-Sys.time()
print(end.time - start.time)
start.time<-Sys.time()
conditiong<-rep(0,m)
for(i in 1:n){
pi2=function(n){
return(4*mean(sqrt(1-runif(n)^2)))
}
conditioning[i] = pi2(n)
}
var(conditioning)
end.time<-Sys.time
print(end.time - start.time)
#antithetic
start.time<-Sys.time()
antithetic <-rep(0,m)
for(i in 1:m){
pi3<-function(n){
x=runif(n)
return(4*mean((sqrt1-x^2)+sqrt(1-(1-x)^2))/2)
}
antithetic[i] = pi3(n)
}
orginal<-reg(0,m)
orginal<-rep(0,m)
orginal
pi1<-function(n){
X<-cbind(runif(n),runif(n))
in_circle<-which(X[,1]^2+X[,2]^2<=1)
fraction<-length(in_circle)/n
return(4*fraction)
}
for(i in 1:m){
original[i]=pi(n)
}
for(i in 1:m){
original[i]=pi1(n)
}
orginal<-rep(0,m)
for(i in 1:m){
original[i]=pi1(n)
}
original<-rep(0,m)
original<-rep(0,m)
for(i in 1:m){
original[i]=pi1(n)
}
var(original)
original
mean(original)
conditioning<-rep(0,m)
pi2=function(n){
return(4*mean(sqrt(1-runif(n)^2)))
}
for(i in 1:n){
conditioning[i] = pi2(n)
}
var(conditioning)
mean(conditioning)
antithetic <-rep(0,m)
for(i in 1:m){
pi3<-function(n){
x=runif(n)
return(4*mean((sqrt(1-x^2)+sqrt(1-(1-x)^2))/2))
}
antithetic[i] = pi3(n)
}
pi3<-function(n){
x=runif(n)
return(4*mean((sqrt(1-x^2)+sqrt(1-(1-x)^2))/2))
}
for(i in 1:m){
antithetic[i] = pi3(n)
}
mean(antithetic)
control<-rep(0,m)
pi4<-function(n){
x<-runif(n)
average<-mean(sqrt(1-x^2)-(1-x))
return(4*average(1/2))
}
for(i in 1:m){
control[i] = pi4(n)
}
pi4<-function(n){
x<-runif(n)
average<-mean(sqrt(1-x^2)-(1-x))
return(4*(average+1/2))
}
for(i in 1:m){
control[i] = pi4(n)
}
mean(control)
X<-matrix(runif(m*n),nrow = n,ncol=m,byrow=T)
X
qnorm(0.025)
E = function(n,iter){
counter <- 0
for( i in 1:iter){
x <- rnorm(n)
I_hat = mean(x^2)
v = var(x^2)
sd = sqrt(v/n)
I = I_hat - 1.96*sd
w = I_hat + 1.96*sd
if(l<=1 & u>=1){
counter = counter+1
}
}
fraction = counter/iter
return(fraction)
}
E(1000,1000)
E = function(n,iter){
counter <- 0
for( i in 1:iter){
x <- rnorm(n)
I_hat = mean(x^2)
v = var(x^2)
sd = sqrt(v/n)
l = I_hat - 1.96*sd
u = I_hat + 1.96*sd
if(l<=1 & u>=1){
counter = counter+1
}
}
fraction = counter/iter
return(fraction)
}
E(1000,1000)
E(1000,1000)
E(1000,1000)
nonsamp = function(n){
u1 <-runif(n)
u2 <- runif(n)
theta = 2piu1
t=-log(u2)
r = sqrt(2*t)
x = r*cos(theta)
y = r*sin(theta)
res = list("X"=x,"Y"=y)
return(res)
}
nonsamp = function(n){
u1 <-runif(n)
u2 <- runif(n)
theta = 2*pi*u1
t=-log(u2)
r = sqrt(2*t)
x = r*cos(theta)
y = r*sin(theta)
res = list("X"=x,"Y"=y)
return(res)
}
nonsamp(10)
plot(nonsamp(10))
plot(nonsamp(10)[1],nonsamp(10)[2])
nonsamp(10)[1]
plot(as.numeric(nonsamp(10)[1]),as.numeric((nonsamp(10)[2]))
)
test<-c(1,1,3,2,4,1,2,1,3,4,2,4,1,1,4,4,4,2)
test2<-rep(1:length(test))
test
test2
test2<-1:length(test)
test2
length(test)
data.frame(test,test2)
test3<-data.frame(test,test2)
lapply(1:18,group)
test3[test3==test3[i]]
i=1
test3[test3==test3[i],]
test3
test3[i,1]
test3[1]
test3[test3[1]==test3[i,1],]
test3[test3[1]==test3[i,1],]
test3[test3[1]==test3[i,1],]
test3[test3[1]==test3[i,1],]
test3[test3[1]==test3[i,1],]
group(i,test3)<-function{
return(test3[test3[1]==test3[i,1],])
}
group(i,test3)<-function{
return(test3[test3[1]==test3[i,1],])
}
group<-function(i,test3){
return(test3[test3[1]==test3[i,1],])
}
lapply(1:18,group,test3=test3)
solution
solution<-test3[test3[1]==test3[i,1],]
test3[1]==test3[i,1]
indexs<-test3[1]==test3[i,1]
solution<-test3[indexs,]
test3<-test3[-indexs,]
test3
indexs<-test3[1]==test3[i,1]
solution<-test3[indexs,]
indexs
solution<-test3[indexs,]
test3<-test3[-indexs,]
test3
solution
test3<-test3[-indexs,]
test3
test3<-data.frame(test,test2)
indexs<-test3[1]==test3[i,1]
solution<-test3[indexs,]
test3<-test3[-indexs,]
test3
indexs
which(indexs)
test3<-data.frame(test,test2)
indexs<-test3[1]==test3[i,1]
solution<-test3[indexs,]
test3<-test3[-which(indexs),]
test3
solution
group<-function(i,test3){
indexs<-test3[1]==test3[i,1]
solution<-test3[indexs,]
test3<-test3[-which(indexs),]
return(solution)
}
lapply(1:18,group,test3=test3)
unique(group)
unique(group[1,])
roup[1,]
(group[,1]
)
test3[,1]
test3<-data.frame(test,test2)
unique(test3[,1])
lapply(1:length(unique(test3[,1])),group,test3=test3)
group<-function(i,test3){
indexs<-test3[1]==test3[i,1]
solution<-test3[indexs,]
test3<-test3[-which(indexs),]
return(solution)
}
lapply(1:length(unique(test3[,1])),group,test3=test3)
?group
library(audio)
s10<-load.wave("Baby_cry01.wav")
setwd("~/Dropbox/Spring 2015/141/141SL_Team_1/Ben")
s10<-load.wave("Baby_cry01.wav")
s10<-load.wave("Baby_cry01.wav")
install.packages("audio")
setwd("~/Documents/Wave")
library(audio)
sample<-load.wave(where="sample.wav")
head(sample,100)
View(sample)
setwd("~/Dropbox/Spring 2015/141/141SL_Team_1/Ben")
s10<-load.wave(where="Baby_cry01.wav")
library(tuneR))
library(tuneR)
install.packages(tuneR)
install.packages("tuneR")
s10<-readWave("Baby_cry01.wav")
library(tuneR)
s10<-readWave("Baby_cry01.wav")
head(s10)
names(s10)
library(tuneR)
#install.packages("tuneR")
library(tuneR)
s10<-readWave("Baby_cry01.wav")
head(s10)
names(s10)
s10$left
s10[1]
data.frame(s10)
s10@left
sample
head(sample,100)
sample<-load.wave(where="sample.wav")
setwd("~/Documents/Wave")
sample<-load.wave(where="sample.wav")
sample
head(sample,100)
s10@left
mean(s10@left)
head(s10@left)
library(tuneR)
s10<-readWave("test_pitch.wav")
setwd("~/Dropbox/Spring 2015/141/141SL_Team_1/Christian")
s10<-readWave("test_pitch.wav")
runif(0)
runif(1)
runif(5)
r_p_s<-function(num){
if(num<=.33){
return("R")
}
else if (num>=.33&num<=.66){
return("P")
}
else {
return("S")
}
}
r_p_s(runif(5))
r_p_s(.1)
r_p_s(.1)
r_p_s(.1)
r_p_s(.5)
r_p_s(.9)
runif(5)
sapply(runif(5),r_p_s)
sapply(runif(5),r_p_s)
sapply(runif(5),r_p_s)
sapply(runif(5),r_p_s)
sapply(runif(5),r_p_s)
sapply(runif(5),r_p_s)
sapply(runif(10),r_p_s)
View(sapply(runif(10),r_p_s))
View(sapply(runif(10),r_p_s))
View(sapply(runif(10),r_p_s))#good luck
View(sapply(runif(10),r_p_s))#good luck
View(sapply(runif(10),r_p_s))#good luck
buffer<-rep(1,MAX_PITCH +FRAME_SIZE)
SAMPLING_RATE<-48000
MIN_PITCH<-40
MAX_PITCH<-720
FRAME_SIZE<-480
VALID_CORR<-0.7
rep(1,MAX_PITCH +FRAME_SIZE)
buffer<-rep(1,MAX_PITCH +FRAME_SIZE)
Correlation_sm<-rep(1,MAX_PITCH +1)
k<-int()
k<-integer()
k
Correlation<-double()
Correlation
Correlation<-double(), Energy1<-double(), Energy2<-double(), Max_Corr<-double(), Max<-double();
Correlation<-double(); Energy1<-double(); Energy2<-double(); Max_Corr<-double(); Max<-double();
2^15
buffer[1:MAX_PITCH]
FrameSize
PRINTOUT<-c()
SAMPLING_RATE<-48000
MIN_PITCH<-40
MAX_PITCH<-720
FRAME_SIZE<-480
VALID_CORR<-0.7
FrameSize<-400
buffer[1:MAX_PITCH]<-buffer[i+FrameSize]
buffer[i+FrameSize]
MAX_PITCH:FrameSize
signal=1
buffer[MAX_PITCH:FrameSize]
MAX_PITCH:FrameSize
buffer[MAX_PITCH:FrameSize]<-signal
buffer
signal<-2
buffer[MAX_PITCH:FrameSize]<-signal
buffer
signal<-1:3
buffer[MAX_PITCH:FrameSize]<-signal
buffer
ptr1 = buffer+MAX_PITCH;
ptr2 = ptr1 - k;
Correlation=0;
Energy1 =0;
Energy2 =0;
Energy2
ptr2
k
k=1
k=MIN_PITCH
ptr1 = buffer+MAX_PITCH;
ptr2 = ptr1 - k;
Correlation=0;
Energy1 =0;
Energy2 =0;
Correlation += ptr1[i]*ptr2[i];
Correlation
ptr1[i]*ptr2[i]
i=1
ptr1[i]*ptr2[i]
ptr1[i]
ptr2[i]
buffer
ptr1 = buffer+MAX_PITCH
ptr1
Correlation[i] = ptr1[i]*ptr2[i];
Correlation
i=2
Correlation[i] = ptr1[i]*ptr2[i];
Correlation
